package flink_apps

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.flink.api.java.aggregation.Aggregations
import org.apache.flink.api.scala._
import org.apache.flink.api.scala.DataSet

/**
 * This program implements a modified version of the TPC-H query 10.
 *
 * The original query can be found at
 * [http://www.tpc.org/tpch/spec/tpch2.16.0.pdf](http://www.tpc.org/tpch/spec/tpch2.16.0.pdf)
 * (page 45).
 *
 * This program implements the following SQL equivalent:
 *
 * {{{
 * SELECT
 *        c_custkey,
 *        c_name,
 *        c_address,
 *        n_name,
 *        c_acctbal
 *        SUM(l_extendedprice * (1 - l_discount)) AS revenue,
 * FROM
 *        customer,
 *        orders,
 *        lineitem,
 *        nation
 * WHERE
 *        c_custkey = o_custkey
 *        AND l_orderkey = o_orderkey
 *        AND YEAR(o_orderdate) > '1990'
 *        AND l_returnflag = 'R'
 *        AND c_nationkey = n_nationkey
 * GROUP BY
 *        c_custkey,
 *        c_name,
 *        c_acctbal,
 *        n_name,
 *        c_address
 * }}}
 *
 * Compared to the original TPC-H query this version does not print
 * c_phone and c_comment, only filters by years greater than 1990 instead of
 * a period of 3 months, and does not sort the result by revenue.
 *
 * Input files are plain text CSV files using the pipe character ('|') as field separator
 * as generated by the TPC-H data generator which is available at
 * [http://www.tpc.org/tpch/](a href="http://www.tpc.org/tpch/).
 */



object TPCHQuery10 {

  /**
   * Calculates TPC-H query 10 from Apache FLink's github code using DatasetGenerators
   * @param customers
   * @param orders
   * @param lineItems
   * @param nations
   */
  def TPCHQuery10Calc (customers:  DataSet[(Long, String, String, Long, Double)], orders: DataSet[(Long, Long, String)], lineItems: DataSet[(Long, Double, Double, String)], nations: DataSet[(Long, String)]): DataSet[(Long, String, String, String, Double, Double)] = {

    // filter orders by years
    val orders1990 = orders.filter( o => o._3.substring(0,4).toInt > 1990)
      .map( o => (o._1, o._2))

    // filter lineItems by return status
    val lineItemsReturn = lineItems.filter( l => l._4.equals("R"))
      .map( l => (l._1, l._2 * (1 - l._3)) )

    // compute revenue by customer
    val revenueByCustomer = orders1990.joinWithHuge(lineItemsReturn).where(0).equalTo(0)
      .apply( (o,l) => (o._2, l._2) )
      .groupBy(0)
      .aggregate(Aggregations.SUM, 1)
      .map(xs => (xs._1, xs._2.ceil))

    // compute final result by joining customer and nation information with revenue
    val result = customers.joinWithTiny(nations).where(3).equalTo(0)
      .apply( (c, n) => (c._1, c._2, c._3, n._2, c._5) )
      .join(revenueByCustomer).where(0).equalTo(0)
      .apply( (c, r) => (c._1, c._2, c._3, c._4, c._5, r._2) )

    result
  }

}
